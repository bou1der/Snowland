services:
  headscale:
    image: headscale/headscale:latest
    pull_policy: always
    container_name: headscale
    restart: unless-stopped
    command: headscale serve
    networks:
      - frontend
    volumes:
      - ./headscale/config:/etc/headscale
      - ./headscale/data:/var/lib/headscale
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.headscale-rtr.rule=PathPrefix(`/`) && Host(`hs.booulder.xyz`)"
      - "traefik.http.services.headscale-svc.loadbalancer.server.port=8080"
      - "traefik.docker.network=frontend"

  headscale-ui:
    image: ghcr.io/gurucomputing/headscale-ui:latest
    pull_policy: always
    container_name: headscale-ui
    restart: unless-stopped
    networks:
      - frontend
    labels:
      # My normal config
      - "traefik.enable=true"
      - "traefik.http.routers.headscale-ui-rtr.rule=PathPrefix(`/web`) && Host(`hs.booulder.xyz`)"
      - "traefik.http.services.headscale-ui-srv.loadbalancer.server.port=80"
      - "treafik.docker.network=frontend"
      - "traefik.http.routers.headscale-ui-rtr.middlewares=authelia@docker"

networks:
  frontend:
    external: true

# services:
#
#   headscale:
#     image: ghcr.io/juanfont/headscale:latest
#     container_name: headscale
#     restart: always
#     ports:
#       - "9090:9090"  # Порт для веб-интерфейса Headscale
#     volumes:
#       - ./server:/server  # Для сохранения данных
#     # environment:
#     # env_file: "./server/.env"
#       # - HEADSCALE_API_KEY=your_api_key  # Можно заменить на собственный API ключ
#     networks:
#       - vpn_network
#     privileged: true  # Это нужно для правильной работы с сетевыми интерфейсами
#
#   # vpn:
#   #   image: tailscale/tailscale:latest
#   #   container_name: tailscale
#   #   restart: always
#   #   network_mode: host  # Важный параметр, чтобы контейнер работал с сетью хоста
#   #   environment:
#   #     - TS_AUTHKEY=your_auth_key  # Ключ авторизации от Headscale
#   #   depends_on:
#   #     - headscale
#   #   networks:
#   #     - vpn_network
#
# networks:
#   vpn_network:
#     external: true
#     # driver: bridge
#
